// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	context "context"
	json "encoding/json"

	lumex "github.com/kbgod/lumex"

	mock "github.com/stretchr/testify/mock"
)

// BotClient is an autogenerated mock type for the BotClient type
type BotClient struct {
	mock.Mock
}

// FileURL provides a mock function with given fields: token, tgFilePath, opts
func (_m *BotClient) FileURL(token string, tgFilePath string, opts *lumex.RequestOpts) string {
	ret := _m.Called(token, tgFilePath, opts)

	if len(ret) == 0 {
		panic("no return value specified for FileURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, *lumex.RequestOpts) string); ok {
		r0 = rf(token, tgFilePath, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAPIURL provides a mock function with given fields: opts
func (_m *BotClient) GetAPIURL(opts *lumex.RequestOpts) string {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*lumex.RequestOpts) string); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RequestWithContext provides a mock function with given fields: ctx, token, method, params, data, opts
func (_m *BotClient) RequestWithContext(ctx context.Context, token string, method string, params map[string]string, data map[string]lumex.FileReader, opts *lumex.RequestOpts) (json.RawMessage, error) {
	ret := _m.Called(ctx, token, method, params, data, opts)

	if len(ret) == 0 {
		panic("no return value specified for RequestWithContext")
	}

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, map[string]lumex.FileReader, *lumex.RequestOpts) (json.RawMessage, error)); ok {
		return rf(ctx, token, method, params, data, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, map[string]lumex.FileReader, *lumex.RequestOpts) json.RawMessage); ok {
		r0 = rf(ctx, token, method, params, data, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string, map[string]lumex.FileReader, *lumex.RequestOpts) error); ok {
		r1 = rf(ctx, token, method, params, data, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBotClient creates a new instance of BotClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBotClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *BotClient {
	mock := &BotClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
